# ======================================================================
#                                   CRM: ŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ + ŸÜŸÇŸÑ + Ÿàÿßÿ™ÿ≥ÿßÿ®
# ======================================================================

def render_table(df_disp: pd.DataFrame):
    if df_disp.empty:
        st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ®ŸäÿßŸÜÿßÿ™.")
        return
    _df = df_disp.copy()
    _df["Alerte"] = _df.get("Alerte_view", "")
    display_cols = [c for c in EXPECTED_HEADERS if c in _df.columns]
    styled = (
        _df[display_cols]
        .style.apply(highlight_inscrit_row, axis=1)
        .applymap(mark_alert_cell, subset=["Alerte"])
        .applymap(color_tag, subset=["Tag"])
    )
    st.dataframe(styled, use_container_width=True)

if role == "ŸÖŸàÿ∏ŸÅ" and employee:
    # ---------- ÿ≠ŸÖÿßŸäÿ© Ÿàÿ±ŸÇÿ© ÿßŸÑŸÖŸàÿ∏ŸÅ ----------
    def _get_emp_password(emp_name: str) -> str:
        try:
            mp = st.secrets["employee_passwords"]
            return str(mp.get(emp_name, mp.get("_default", "1234")))
        except Exception:
            return "1234"

    def _emp_unlocked(emp_name: str) -> bool:
        ok = st.session_state.get(f"emp_ok::{emp_name}", False)
        ts = st.session_state.get(f"emp_ok_at::{emp_name}")
        return bool(ok and ts and (datetime.now() - ts) <= timedelta(minutes=15))

    def _emp_lock_ui(emp_name: str):
        with st.expander(f"üîê ÿ≠ŸÖÿßŸäÿ© Ÿàÿ±ŸÇÿ© ÿßŸÑŸÖŸàÿ∏ŸëŸÅ: {emp_name}", expanded=not _emp_unlocked(emp_name)):
            if _emp_unlocked(emp_name):
                c1, c2 = st.columns(2)
                with c1:
                    st.success("ŸÖŸÅÿ™Ÿàÿ≠ (15 ÿØŸÇŸäŸÇÿ©).")
                with c2:
                    if st.button("ŸÇŸÅŸÑ ÿßŸÑÿ¢ŸÜ"):
                        st.session_state[f"emp_ok::{emp_name}"] = False
                        st.session_state[f"emp_ok_at::{emp_name}"] = None
                        st.info("ÿ™ŸÖ ÿßŸÑŸÇŸÅŸÑ.")
            else:
                pwd_try = st.text_input("ÿ£ÿØÿÆŸÑ ŸÉŸÑŸÖÿ© ÿßŸÑÿ≥ÿ±Ÿë", type="password", key=f"emp_pwd_{emp_name}")
                if st.button("ŸÅÿ™ÿ≠"):
                    if pwd_try and pwd_try == _get_emp_password(emp_name):
                        st.session_state[f"emp_ok::{emp_name}"] = True
                        st.session_state[f"emp_ok_at::{emp_name}"] = datetime.now()
                        st.success("ÿ™ŸÖ ÿßŸÑŸÅÿ™ÿ≠ ŸÑŸÖÿØÿ© 15 ÿØŸÇŸäŸÇÿ©.")
                    else:
                        st.error("ŸÉŸÑŸÖÿ© ÿ≥ÿ±Ÿë ÿ∫Ÿäÿ± ÿµÿ≠Ÿäÿ≠ÿ©.")

    _emp_lock_ui(employee)
    if not _emp_unlocked(employee):
        st.info("üîí ÿ£ÿØÿÆŸÑ ŸÉŸÑŸÖÿ© ÿ≥ÿ±Ÿë ÿßŸÑŸÖŸàÿ∏ŸëŸÅ ŸÑŸÅÿ™ÿ≠ ÿßŸÑŸàÿ±ŸÇÿ©.")
        st.stop()

    # ---------- ÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ∏ŸëŸÅ ----------
    st.subheader(f"üìÅ ŸÑŸàÿ≠ÿ© {employee}")
    df_emp = df_all[df_all["__sheet_name"] == employee].copy()

    if df_emp.empty:
        st.warning("‚ö†Ô∏è ŸÑÿß ŸäŸàÿ¨ÿØ ÿ£Ÿä ÿπŸÖŸÑÿßÿ° ŸÑŸáÿ∞ÿß ÿßŸÑŸÖŸàÿ∏ŸÅ ÿ®ÿπÿØ.")
        st.stop()

    # ÿßÿÆÿ™Ÿäÿßÿ± ÿ¥Ÿáÿ± ‚Üí filtered_df
    df_emp["DateAjout_dt"] = pd.to_datetime(df_emp["Date ajout"], dayfirst=True, errors="coerce")
    df_emp = df_emp.dropna(subset=["DateAjout_dt"])
    df_emp["Mois"] = df_emp["DateAjout_dt"].dt.strftime("%m-%Y")
    month_options = sorted(df_emp["Mois"].dropna().unique(), reverse=True)
    month_filter = st.selectbox("üóìÔ∏è ÿßÿÆÿ™ÿ± ÿ¥Ÿáÿ± ÿßŸÑÿ•ÿ∂ÿßŸÅÿ©", month_options)
    filtered_df = df_emp[df_emp["Mois"] == month_filter].copy()

    st.markdown("### üìã ŸÇÿßÿ¶ŸÖÿ© ÿßŸÑÿπŸÖŸÑÿßÿ°")
    render_table(filtered_df)

    # ===================== (A) üö® ÿπÿ±ÿ∂ ÿßŸÑÿπŸÖŸÑÿßÿ° ÿßŸÑÿ∞ŸäŸÜ ŸÑÿØŸäŸáŸÖ ÿ™ŸÜÿ®ŸäŸáÿßÿ™ =====================
    if not filtered_df.empty and st.checkbox("üî¥ ÿπÿ±ÿ∂ ÿßŸÑÿπŸÖŸÑÿßÿ° ÿßŸÑÿ∞ŸäŸÜ ŸÑÿØŸäŸáŸÖ ÿ™ŸÜÿ®ŸäŸáÿßÿ™"):
        _df_alerts = filtered_df.copy()
        _df_alerts["Alerte"] = _df_alerts.get("Alerte_view", "")
        alerts_df = _df_alerts[_df_alerts["Alerte"].fillna("").astype(str).str.strip() != ""]
        st.markdown("### üö® ÿπŸÖŸÑÿßÿ° ŸÖÿπ ÿ™ŸÜÿ®ŸäŸáÿßÿ™")
        if alerts_df.empty:
            st.info("ŸÑÿß ÿ™Ÿàÿ¨ÿØ ÿ™ŸÜÿ®ŸäŸáÿßÿ™ ÿ≠ÿßŸÑŸäŸãÿß ÿ∂ŸÖŸÜ ÿßŸÑŸÅŸÑÿ™ÿ±ÿ©.")
        else:
            render_table(alerts_df)

    st.divider()

    # ===================== (B) üìù ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ≥ÿ±Ÿäÿπÿ© (ÿÆÿ™ŸÖ ÿ≤ŸÖŸÜŸä) =====================
    st.markdown("### üìù ÿ£ÿ∂ŸÅ ŸÖŸÑÿßÿ≠ÿ∏ÿ© (ÿ≥ÿ±Ÿäÿπÿ©)")
    scope_df = filtered_df if not filtered_df.empty else df_emp
    scope_df = scope_df.copy()
    scope_df["T√©l√©phone_norm"] = scope_df["T√©l√©phone"].apply(normalize_tn_phone)

    tel_to_update_key = st.selectbox(
        "ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÖŸäŸÑ",
        [
            f"{r['Nom & Pr√©nom']} ‚Äî {format_display_phone(normalize_tn_phone(r['T√©l√©phone']))}"
            for _, r in scope_df.iterrows()
            if str(r.get('T√©l√©phone','')).strip() != ""
        ],
        key="note_quick_pick"
    )
    tel_to_update = normalize_tn_phone(tel_to_update_key.split("‚Äî")[-1]) if tel_to_update_key else ""
    new_note_quick = st.text_area("üóíÔ∏è ŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿ¨ÿØŸäÿØÿ© (ÿ≥Ÿäÿ∂ÿßŸÅ ŸÑŸáÿß ÿ∑ÿßÿ®ÿπ ÿ≤ŸÖŸÜŸä)", key="note_quick_txt")

    if st.button("üìå ÿ£ÿ∂ŸÅ ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿ©", key="note_quick_btn"):
        try:
            ws = client.open_by_key(SPREADSHEET_ID).worksheet(employee)
            values = ws.get_all_values()
            header = values[0] if values else []
            if "T√©l√©phone" in header:
                tel_idx = header.index("T√©l√©phone")
                row_idx = None
                for i, r in enumerate(values[1:], start=2):
                    if len(r) > tel_idx and normalize_tn_phone(r[tel_idx]) == tel_to_update:
                        row_idx = i
                        break
                if not row_idx:
                    st.error("‚ùå ÿßŸÑŸáÿßÿ™ŸÅ ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ.")
                else:
                    rem_col = EXPECTED_HEADERS.index("Remarque") + 1
                    old_remark = ws.cell(row_idx, rem_col).value or ""
                    stamp = datetime.now().strftime("%d/%m/%Y %H:%M")
                    updated = (old_remark + "\n" if old_remark else "") + f"[{stamp}] {new_note_quick.strip()}"
                    ws.update_cell(row_idx, rem_col, updated)
                    st.success("‚úÖ ÿ™ŸÖÿ™ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿ©")
                    st.cache_data.clear()
        except Exception as e:
            st.error(f"‚ùå ÿÆÿ∑ÿ£: {e}")

    st.divider()

    # ===================== (C) ‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿπŸÖŸäŸÑ =====================
    st.markdown("### ‚úèÔ∏è ÿ™ÿπÿØŸäŸÑ ÿ®ŸäÿßŸÜÿßÿ™ ÿπŸÖŸäŸÑ")
    df_emp_edit = df_emp.copy()
    df_emp_edit["T√©l√©phone_norm"] = df_emp_edit["T√©l√©phone"].apply(normalize_tn_phone)

    phone_choices = {
        f"[{i}] {row['Nom & Pr√©nom']} ‚Äî {format_display_phone(row['T√©l√©phone_norm'])}": row["T√©l√©phone_norm"]
        for i, row in df_emp_edit.iterrows()
        if str(row.get("T√©l√©phone","")).strip() != ""
    }

    if phone_choices:
        chosen_key   = st.selectbox("ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÖŸäŸÑ (ÿ®ÿßŸÑÿßÿ≥ŸÖ/ÿßŸÑŸáÿßÿ™ŸÅ)", list(phone_choices.keys()), key="edit_pick")
        chosen_phone = phone_choices.get(chosen_key, "")
        cur_row = df_emp_edit[df_emp_edit["T√©l√©phone_norm"] == chosen_phone].iloc[0] if chosen_phone else None

        cur_name      = str(cur_row.get("Nom & Pr√©nom","")) if cur_row is not None else ""
        cur_tel_raw   = str(cur_row.get("T√©l√©phone",""))    if cur_row is not None else ""
        cur_formation = str(cur_row.get("Formation",""))    if cur_row is not None else ""
        cur_remark    = str(cur_row.get("Remarque",""))     if cur_row is not None else ""
        cur_ajout = (
            pd.to_datetime(cur_row.get("Date ajout",""), dayfirst=True, errors="coerce").date()
            if cur_row is not None else date.today()
        )
        cur_suivi = (
            pd.to_datetime(cur_row.get("Date de suivi",""), dayfirst=True, errors="coerce").date()
            if cur_row is not None and str(cur_row.get("Date de suivi","")).strip()
            else date.today()
        )
        cur_insc  = str(cur_row.get("Inscription","")).strip().lower() if cur_row is not None else ""

        # ŸÖŸÅÿßÿ™Ÿäÿ≠ ÿØŸäŸÜÿßŸÖŸäŸÉŸäÿ©
        name_key   = f"edit_name_txt::{chosen_phone}"
        phone_key  = f"edit_phone_txt::{chosen_phone}"
        form_key   = f"edit_formation_txt::{chosen_phone}"
        ajout_key  = f"edit_ajout_dt::{chosen_phone}"
        suivi_key  = f"edit_suivi_dt::{chosen_phone}"
        insc_key   = f"edit_insc_sel::{chosen_phone}"
        remark_key = f"edit_remark_txt::{chosen_phone}"
        note_key   = f"append_note_txt::{chosen_phone}"

        col1, col2 = st.columns(2)
        with col1:
            new_name      = st.text_input("üë§ ÿßŸÑÿßÿ≥ŸÖ Ÿà ÿßŸÑŸÑŸÇÿ®", value=cur_name, key=name_key)
            new_phone_raw = st.text_input("üìû ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ", value=cur_tel_raw, key=phone_key)
            new_formation = st.text_input("üìö ÿßŸÑÿ™ŸÉŸàŸäŸÜ", value=cur_formation, key=form_key)
        with col2:
            new_ajout = st.date_input("üïì ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ÿ∂ÿßŸÅÿ©", value=cur_ajout, key=ajout_key)
            new_suivi = st.date_input("üìÜ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ©", value=cur_suivi, key=suivi_key)
            new_insc  = st.selectbox("üü¢ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ", ["Pas encore", "Inscrit"], index=(1 if cur_insc == "oui" else 0), key=insc_key)

        new_remark_full = st.text_area("üóíÔ∏è ŸÖŸÑÿßÿ≠ÿ∏ÿ© (ÿßÿ≥ÿ™ÿ®ÿØÿßŸÑ ŸÉÿßŸÖŸÑ)", value=cur_remark, key=remark_key)
        extra_note      = st.text_area("‚ûï ÿ£ÿ∂ŸÅ ŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿ¨ÿØŸäÿØÿ© (ÿ∑ÿßÿ®ÿπ ÿ≤ŸÖŸÜŸä)", placeholder="ÿßŸÉÿ™ÿ® ŸÖŸÑÿßÿ≠ÿ∏ÿ© ŸÑÿ•ŸÑÿ≠ÿßŸÇŸáÿß‚Ä¶", key=note_key)

        def _find_row_by_phone(ws, phone_digits: str) -> int | None:
            values = ws.get_all_values()
            if not values:
                return None
            header = values[0]
            if "T√©l√©phone" not in header:
                return None
            tel_idx = header.index("T√©l√©phone")
            for i, r in enumerate(values[1:], start=2):
                if len(r) > tel_idx and normalize_tn_phone(r[tel_idx]) == phone_digits:
                    return i
            return None

        if st.button("üíæ ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ÿπÿØŸäŸÑÿßÿ™", key="save_all_edits"):
            try:
                ws = client.open_by_key(SPREADSHEET_ID).worksheet(employee)
                row_idx = _find_row_by_phone(ws, normalize_tn_phone(chosen_phone))
                if not row_idx:
                    st.error("‚ùå ÿ™ÿπÿ∞Ÿëÿ± ÿ•Ÿäÿ¨ÿßÿØ ÿßŸÑÿµŸÅ ŸÑŸáÿ∞ÿß ÿßŸÑŸáÿßÿ™ŸÅ.")
                else:
                    col_map = {h: (EXPECTED_HEADERS.index(h) + 1) for h in [
                        "Nom & Pr√©nom","T√©l√©phone","Formation","Date ajout","Date de suivi","Inscription","Remarque"
                    ]}
                    new_phone_norm = normalize_tn_phone(new_phone_raw)
                    if not new_name.strip():
                        st.error("‚ùå ÿßŸÑÿßÿ≥ŸÖ Ÿà ÿßŸÑŸÑŸÇÿ® ÿ•ÿ¨ÿ®ÿßÿ±Ÿä.")
                        st.stop()
                    if not new_phone_norm.strip():
                        st.error("‚ùå ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ ÿ•ÿ¨ÿ®ÿßÿ±Ÿä.")
                        st.stop()

                    phones_except_current = (set(df_all["T√©l√©phone_norm"].astype(str)) - {normalize_tn_phone(chosen_phone)})
                    if new_phone_norm in phones_except_current:
                        st.error("‚ö†Ô∏è ÿßŸÑÿ±ŸÇŸÖ ŸÖŸàÿ¨ŸàÿØ ŸÖÿ≥ÿ®ŸÇŸãÿß ŸÑÿπŸÖŸäŸÑ ÿ¢ÿÆÿ±.")
                        st.stop()

                    ws.update_cell(row_idx, col_map["Nom & Pr√©nom"], new_name.strip())
                    ws.update_cell(row_idx, col_map["T√©l√©phone"],   new_phone_norm)
                    ws.update_cell(row_idx, col_map["Formation"],   new_formation.strip())
                    ws.update_cell(row_idx, col_map["Date ajout"],  fmt_date(new_ajout))
                    ws.update_cell(row_idx, col_map["Date de suivi"], fmt_date(new_suivi))
                    ws.update_cell(row_idx, col_map["Inscription"], "Oui" if new_insc == "Inscrit" else "Pas encore")

                    if new_remark_full.strip() != cur_remark.strip():
                        ws.update_cell(row_idx, col_map["Remarque"], new_remark_full.strip())

                    if extra_note.strip():
                        old_rem = ws.cell(row_idx, col_map["Remarque"]).value or ""
                        stamp = datetime.now().strftime("%d/%m/%Y %H:%M")
                        appended = (old_rem + "\n" if old_rem else "") + f"[{stamp}] {extra_note.strip()}"
                        ws.update_cell(row_idx, col_map["Remarque"], appended)

                    st.success("‚úÖ ÿ™ŸÖ ÿ≠ŸÅÿ∏ ÿßŸÑÿ™ÿπÿØŸäŸÑÿßÿ™")
                    st.cache_data.clear()
            except Exception as e:
                st.error(f"‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ™ÿπÿØŸäŸÑ: {e}")

    st.divider()

    # ===================== (D) üé® ÿ™ŸÑŸàŸäŸÜ/Tag =====================
    st.markdown("### üé® ÿßÿÆÿ™ÿ± ŸÑŸàŸÜ/Tag ŸÑŸÑÿπŸÖŸäŸÑ")
    scope_df2 = filtered_df if not filtered_df.empty else df_emp
    scope_df2 = scope_df2.copy()
    scope_df2["T√©l√©phone_norm"] = scope_df2["T√©l√©phone"].apply(normalize_tn_phone)

    tel_color_key = st.selectbox(
        "ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÖŸäŸÑ",
        [
            f"{r['Nom & Pr√©nom']} ‚Äî {format_display_phone(normalize_tn_phone(r['T√©l√©phone']))}"
            for _, r in scope_df2.iterrows()
            if str(r.get('T√©l√©phone','')).strip() != ""
        ],
        key="tag_select"
    )
    tel_color = normalize_tn_phone(tel_color_key.split("‚Äî")[-1]) if tel_color_key else ""
    hex_color = st.color_picker("ÿßÿÆÿ™ÿ± ÿßŸÑŸÑŸàŸÜ", value=st.session_state.get("last_color", "#00AA88"))
    if st.button("üñåÔ∏è ÿ™ŸÑŸàŸäŸÜ", key="tag_apply_btn"):
        try:
            ws = client.open_by_key(SPREADSHEET_ID).worksheet(employee)
            values = ws.get_all_values()
            header = values[0] if values else []
            row_idx = None
            if "T√©l√©phone" in header:
                tel_idx = header.index("T√©l√©phone")
                for i, r in enumerate(values[1:], start=2):
                    if len(r) > tel_idx and normalize_tn_phone(r[tel_idx]) == tel_color:
                        row_idx = i
                        break
            if not row_idx:
                st.error("‚ùå ŸÑŸÖ Ÿäÿ™ŸÖ ÿ•Ÿäÿ¨ÿßÿØ ÿßŸÑÿπŸÖŸäŸÑ.")
            else:
                st.session_state["last_color"] = hex_color
                color_col = EXPECTED_HEADERS.index("Tag") + 1
                ws.update_cell(row_idx, color_col, hex_color)
                st.success("‚úÖ ÿ™ŸÖ ÿßŸÑÿ™ŸÑŸàŸäŸÜ")
                st.cache_data.clear()
        except Exception as e:
            st.error(f"‚ùå ÿÆÿ∑ÿ£: {e}")

    st.divider()

    # ===================== (E) üîÅ ŸÜŸÇŸÑ ÿπŸÖŸäŸÑ + Log =====================
    st.markdown("### üîÅ ŸÜŸÇŸÑ ÿπŸÖŸäŸÑ ÿ®ŸäŸÜ ÿßŸÑŸÖŸàÿ∏ŸÅŸäŸÜ")
    if all_employes:
        colRA, colRB = st.columns(2)
        with colRA:
            src_emp = st.selectbox("ŸÖŸÜ ŸÖŸàÿ∏ŸëŸÅ", all_employes, key="reassign_src")
        with colRB:
            dst_emp = st.selectbox("ÿ•ŸÑŸâ ŸÖŸàÿ∏ŸëŸÅ", [e for e in all_employes if e != src_emp], key="reassign_dst")

        df_src = df_all[df_all["__sheet_name"] == src_emp].copy()
        if df_src.empty:
            st.info("‚ùï ŸÑÿß ŸäŸàÿ¨ÿØ ÿπŸÖŸÑÿßÿ° ÿπŸÜÿØ Ÿáÿ∞ÿß ÿßŸÑŸÖŸàÿ∏ŸëŸÅ.")
        else:
            pick = st.selectbox(
                "ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÖŸäŸÑ ŸÑŸÑŸÜŸÇŸÑ",
                [f"{r['Nom & Pr√©nom']} ‚Äî {format_display_phone(r['T√©l√©phone'])}" for _, r in df_src.iterrows()],
                key="reassign_pick"
            )
            phone_pick = normalize_tn_phone(pick.split("‚Äî")[-1])
            mover = employee  # ÿ¥ŸÉŸàŸÜ ÿπÿßŸÖŸÑ ÿßŸÑŸÜŸÇŸÑ (ÿßŸÑŸÖŸàÿ∏ŸÅ ÿßŸÑÿ≠ÿßŸÑŸä)
            if st.button("üöö ŸÜŸÇŸÑ ÿßŸÑÿ¢ŸÜ"):
                try:
                    sh = client.open_by_key(SPREADSHEET_ID)
                    ws_src, ws_dst = sh.worksheet(src_emp), sh.worksheet(dst_emp)
                    values = ws_src.get_all_values()
                    header = values[0] if values else []
                    row_idx = None
                    if "T√©l√©phone" in header:
                        tel_idx = header.index("T√©l√©phone")
                        for i, r in enumerate(values[1:], start=2):
                            if len(r) > tel_idx and normalize_tn_phone(r[tel_idx]) == phone_pick:
                                row_idx = i
                                break
                    if not row_idx:
                        st.error("‚ùå ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ Ÿáÿ∞ÿß ÿßŸÑÿπŸÖŸäŸÑ.")
                    else:
                        row_values = ws_src.row_values(row_idx)
                        if len(row_values) < len(EXPECTED_HEADERS):
                            row_values += [""] * (len(EXPECTED_HEADERS) - len(row_values))
                        row_values = row_values[:len(EXPECTED_HEADERS)]
                        row_values[EXPECTED_HEADERS.index("Employe")] = dst_emp
                        ws_dst.append_row(row_values)
                        ws_src.delete_rows(row_idx)

                        # ‚úÖ Log "ÿ¥ŸÉŸàŸÜ ÿ≠ÿ±ŸëŸÉ"
                        wslog = ensure_ws(REASSIGN_LOG_SHEET, REASSIGN_LOG_HEADERS)
                        wslog.append_row([
                            datetime.now(timezone.utc).isoformat(),
                            mover, src_emp, dst_emp,
                            row_values[0],
                            normalize_tn_phone(row_values[1])
                        ])

                        st.success(f"‚úÖ ŸÜŸÇŸÑ ({row_values[0]}) ŸÖŸÜ {src_emp} ÿ•ŸÑŸâ {dst_emp}")
                        st.cache_data.clear()
                except Exception as e:
                    st.error(f"‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑŸÜŸÇŸÑ: {e}")

    st.divider()

    # ===================== (F) üí¨ WhatsApp =====================
    st.markdown("### üí¨ ÿ™ŸàÿßÿµŸÑ WhatsApp")
    wa_pick = st.selectbox(
        "ÿßÿÆÿ™ÿ± ÿßŸÑÿπŸÖŸäŸÑ ŸÑŸÅÿ™ÿ≠ Ÿàÿßÿ™ÿ≥ÿßÿ®",
        [f"{r['Nom & Pr√©nom']} ‚Äî {format_display_phone(r['T√©l√©phone'])}" for _, r in (filtered_df if not filtered_df.empty else df_emp).iterrows()],
        key="wa_pick"
    )
    default_msg = "ÿ≥ŸÑÿßŸÖ! ŸÖÿπÿßŸÉ Mega Formation. ÿ®ÿÆÿµŸàÿµ ÿßŸÑÿ™ŸÉŸàŸäŸÜÿå ŸÜÿ≠ÿ®ŸëŸàÿß ŸÜŸÜÿ≥ŸëŸÇŸà ŸÖÿπÿßŸÉ ŸÖŸàÿπÿØ ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ©. üëç"
    wa_msg = st.text_area("ÿßŸÑÿ±ÿ≥ÿßŸÑÿ© (WhatsApp)", value=default_msg, key="wa_msg")
    if st.button("üì≤ ŸÅÿ™ÿ≠ WhatsApp"):
        try:
            raw_tel = wa_pick.split("‚Äî")[-1]
            tel_norm = normalize_tn_phone(raw_tel)
            url = f"https://wa.me/{tel_norm}?text={urllib.parse.quote(wa_msg)}"
            st.markdown(f"[ÿßŸÅÿ™ÿ≠ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ÿßŸÑÿ¢ŸÜ]({url})")
            st.info("ÿßÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ ÿßŸÑÿ±ÿßÿ®ÿ∑ ŸÑŸÅÿ™ÿ≠ Ÿàÿßÿ™ÿ≥ÿßÿ®.")
        except Exception as e:
            st.error(f"‚ùå ÿ™ÿπÿ∞Ÿëÿ± ÿ•ŸÜÿ¥ÿßÿ° ÿ±ÿßÿ®ÿ∑ Ÿàÿßÿ™ÿ≥ÿßÿ®: {e}")

    st.divider()

    # ===================== (G) ‚ûï ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸäŸÑ ÿ¨ÿØŸäÿØ =====================
    st.markdown("### ‚ûï ÿ£ÿ∂ŸÅ ÿπŸÖŸäŸÑ ÿ¨ÿØŸäÿØ")
    with st.form("emp_add_client"):
        col1, col2 = st.columns(2)
        with col1:
            nom = st.text_input("üë§ ÿßŸÑÿßÿ≥ŸÖ Ÿà ÿßŸÑŸÑŸÇÿ®")
            tel_raw = st.text_input("üìû ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ")
            formation = st.text_input("üìö ÿßŸÑÿ™ŸÉŸàŸäŸÜ")
            inscription = st.selectbox("üü¢ ÿßŸÑÿ™ÿ≥ÿ¨ŸäŸÑ", ["Pas encore", "Inscrit"])
        with col2:
            type_contact = st.selectbox("üìû ŸÜŸàÿπ ÿßŸÑÿßÿ™ÿµÿßŸÑ", ["Visiteur", "Appel t√©l√©phonique", "WhatsApp", "Social media"])
            date_ajout_in = st.date_input("üïì ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑÿ•ÿ∂ÿßŸÅÿ©", value=date.today())
            date_suivi_in = st.date_input("üìÜ ÿ™ÿßÿ±ŸäÿÆ ÿßŸÑŸÖÿ™ÿßÿ®ÿπÿ©", value=date.today())

        if st.form_submit_button("üì• ÿ£ÿ∂ŸÅ ÿßŸÑÿπŸÖŸäŸÑ"):
            try:
                ws = client.open_by_key(SPREADSHEET_ID).worksheet(employee)
                tel = normalize_tn_phone(tel_raw)
                if not (nom and tel and formation):
                    st.error("‚ùå ÿ≠ŸÇŸàŸÑ ÿ£ÿ≥ÿßÿ≥Ÿäÿ© ŸÜÿßŸÇÿµÿ©.")
                    st.stop()
                if tel in ALL_PHONES:
                    st.warning("‚ö†Ô∏è ÿßŸÑÿ±ŸÇŸÖ ŸÖŸàÿ¨ŸàÿØ ŸÖÿ≥ÿ®ŸÇŸãÿß.")
                    st.stop()
                insc_val = "Oui" if inscription == "Inscrit" else "Pas encore"
                ws.append_row([
                    nom, tel, type_contact, formation, "",
                    fmt_date(date_ajout_in), fmt_date(date_suivi_in),
                    "", insc_val, employee, ""
                ])
                st.success("‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿπŸÖŸäŸÑ")
                st.cache_data.clear()
            except Exception as e:
                st.error(f"‚ùå ÿÆÿ∑ÿ£ ÿ£ÿ´ŸÜÿßÿ° ÿßŸÑÿ•ÿ∂ÿßŸÅÿ©: {e}")
